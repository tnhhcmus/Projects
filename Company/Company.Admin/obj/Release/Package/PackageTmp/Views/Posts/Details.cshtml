@using Company.Models
@using System.Collections
@model PostInfo

@{
    ViewBag.Title = "Index";
    bool isActive = Model.Status != "Inactive";
    Hashtable menuItems = ViewData["Menu"] == null ? new Hashtable() : ViewData["Menu"] as Hashtable;
    Hashtable townItems = ViewData["TownItems"] == null ? new Hashtable() : ViewData["TownItems"] as Hashtable;
}

<!-- Ckeditor -->
<script type="text/javascript" src="~/Assets/widgets/ckeditor/ckeditor.js"></script>

<script>

    // This code is generally not necessary, but it is here to demonstrate
    // how to customize specific editor instances on the fly. This fits well
    // this demo because we have editable elements (like headers) that
    // require less features.

    // The "instanceCreated" event is fired for every editor instance created.
    CKEDITOR.on( 'instanceCreated', function( event ) {
        var editor = event.editor,
                element = editor.element;

        // Customize editors for headers and tag list.
        // These editors don't need features like smileys, templates, iframes etc.
        //if ( element.is( 'h1', 'h2', 'h3' ) || element.getAttribute( 'id' ) == 'taglist' ) {
        //    // Customize the editor configurations on "configLoaded" event,
        //    // which is fired after the configuration file loading and
        //    // execution. This makes it possible to change the
        //    // configurations before the editor initialization takes place.
        //    editor.on( 'configLoaded', function() {

        //        // Remove unnecessary plugins to make the editor simpler.
        //        //editor.config.removePlugins = 'colorbutton,find,flash,font,' +
        //        //'forms,iframe,image,newpage,removeformat,' +
        //        //'smiley,specialchar,stylescombo,templates';

        //        // Rearrange the layout of the toolbar.
        //        editor.config.toolbarGroups = [
        //            { name: 'editing',		groups: [ 'basicstyles', 'links' ] },
        //            { name: 'undo' },
        //            { name: 'clipboard',	groups: [ 'selection', 'clipboard' ] },
        //            { name: 'about' }
        //        ];

        //        editor.config.autoUpdateElement = true;
        //        editor.config.docType = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">';
        //        editor.config.extraPlugins = 'pastefromword';
        //        editor.config.filebrowserImageUploadUrl = "/Home/CKUploadFiles";
        //        editor.config.pasteFromWordRemoveFontStyles = false;
        //        editor.config.pasteFromWordRemoveStyles = false;
        //    });
        //}

    });

</script>
<style>
    *[contenteditable="true"] {
        padding: 10px;
    }

    #container {
        width: 960px;
        margin: 30px auto 0;
    }

    #header {
        overflow: hidden;
        padding: 0 0 30px;
        border-bottom: 5px solid #05B2D2;
        position: relative;
    }

    #headerLeft,
    #headerRight {
        width: 49%;
        overflow: hidden;
    }

    #headerLeft {
        float: left;
        padding: 10px 1px 1px;
    }

        #headerLeft h2,
        #headerLeft h3 {
            text-align: right;
            margin: 0;
            overflow: hidden;
            font-weight: normal;
        }

        #headerLeft h2 {
            font-family: "Arial",sans-serif;
            font-size: 4.6em;
            line-height: 1.1;
            text-transform: uppercase;
        }

        #headerLeft h3 {
            font-size: 2.3em;
            line-height: 1.1;
            margin: .2em 0 0;
            color: #666;
        }

    #headerRight {
        float: right;
        padding: 1px;
    }

        #headerRight p {
            line-height: 1.8;
            text-align: justify;
            margin: 0;
        }

            #headerRight p + p {
                margin-top: 20px;
            }

        #headerRight > div {
            padding: 20px;
            margin: 0 0 0 30px;
            font-size: 1.4em;
            color: #666;
        }

    #columns {
        color: #333;
        overflow: hidden;
        padding: 20px 0;
    }

        #columns > div {
            float: left;
            width: 33.3%;
        }

        #columns #column1 > div {
            margin-left: 1px;
        }

        #columns #column3 > div {
            margin-right: 1px;
        }

        #columns > div > div {
            margin: 0px 10px;
            padding: 10px 20px;
        }

        #columns blockquote {
            margin-left: 15px;
        }

    #tagLine {
        border-top: 5px solid #05B2D2;
        padding-top: 20px;
    }

    #taglist {
        display: inline-block;
        margin-left: 20px;
        font-weight: bold;
        margin: 0 0 0 20px;
    }

    .thumbnail > img {
        display: inline-block;
        max-width: 100%;
        max-height: 100%;
    }
</style>


<div id="page-title">
    <h2>Menu</h2>
</div>

<div class="panel">
    <div class="panel-body">
        <h3 class="title-hero">
            @{
                @Html.Raw(Model.Id > 0 ? "Update" : "New Post")
            }
        </h3>
        <div class="example-box-wrapper">
            @Html.ValidationMessage("Error")
            <form action="@Url.Action("Index", "Posts")" method="post" enctype ="multipart/form-data" class="form-horizontal bordered-row" data-parsley-validate>
                <input type="hidden" value="@Model.Id" name="Id" />
                <div class="form-group">
                    <label class="col-sm-3 control-label">Title</label>
                    <div class="col-sm-6">
                        <input type="text" class="form-control" id="" name="Title" required placeholder="Title" value="@Model.Title">
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label">Menu</label>
                    <div class="col-sm-4">
                        <select class="form-control" name="Type">
                            @foreach (DictionaryEntry entry in menuItems)
                            {
                                if (!string.IsNullOrEmpty(Model.Type) && entry.Key.ToString() == Model.Type)
                                {
                                    @Html.Raw("<option value='" + entry.Key.ToString() + "' selected>" + entry.Value.ToString() + "</option>")
                                }
                                else
                                {
                                    @Html.Raw("<option value='" + entry.Key.ToString() + "'>" + entry.Value.ToString() + "</option>")
                                }
                            }
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label">Image</label>
                    <div class="col-sm-6">
                        <div class="fileinput fileinput-new" data-provides="fileinput">
                            <div class="fileinput-preview thumbnail" data-trigger="fileinput" style="width: 200px; height: 150px;">
                                <img id="imgThumbnail" src="@Url.Action("Files", "Home", new { key = Model.Images })" style="text-align: center; align-content: center;"/>
                            </div>
                            <div>
                                <span class="btn btn-default btn-file">
                                    <span class="fileinput-new">Select image</span>
                                    <span class="fileinput-exists">Change</span>
                                    <input type="file" id="imgData" name="ImageData">
                                </span>
                                <a href="#" class="btn btn-default fileinput-exists" data-dismiss="fileinput">Remove</a>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label">Company Name</label>
                    <div class="col-sm-6">
                        <input type="text" class="form-control" name="CompanyName" value="@Model.CompanyName" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label">City</label>
                    <div class="col-sm-2">
                        <select class="form-control" name="City">
                            <option>TP HCM</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label">Town</label>
                    <div class="col-sm-2">
                        <select class="form-control" name="Town">
                            @foreach (DictionaryEntry entry in townItems)
                            {
                                if (!string.IsNullOrEmpty(Model.Town) && Model.Town == entry.Key.ToString())
                                {
                                    @Html.Raw("<option value='" + entry.Key.ToString() + "' selected>" + entry.Value.ToString() + "</option>")
                                }
                                else
                                {
                                    @Html.Raw("<option value='" + entry.Key.ToString() + "'>" + entry.Value.ToString() + "</option>")
                                }
                            }
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label">Address</label>
                    <div class="col-sm-6">
                        <input type="text" class="form-control" name="Address" value="@Model.Address" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label">Contact Name</label>
                    <div class="col-sm-3">
                        <input type="text" class="form-control" name="ContactPerson" value="@Model.ContactPerson" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label">Email</label>
                    <div class="col-sm-4">
                        <input type="text" class="form-control" name="Email" value="@Model.Email" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label">Phone Number</label>
                    <div class="col-sm-4">
                        <input type="text" class="form-control" name="PhoneNumber" value="@Model.PhoneNumber" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label">Wage Min</label>
                    <div class="col-sm-2">
                        <input type="text" class="form-control" data-parsley-minlength="7" data-parsley-pattern="\d" name="WageMin" value="@string.Format("{0}", Model.WageMin > 0 ? Model.WageMin.ToString() : "")" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label">Wage Max</label>
                    <div class="col-sm-2">
                        <input type="text" class="form-control" data-parsley-minlength="7" data-parsley-pattern="\d" name="WageMax" value="@string.Format("{0}", Model.WageMax > 0 ? Model.WageMax.ToString() : "")" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label">Content</label>
                    <div class="col-sm-6">
                        <textarea class="ckeditor" cols="80" id="editorPostContent" name="Content" rows="10" placeholder="Content">@Model.Content</textarea>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label">Status</label>
                    <div class="col-sm-1">
                        <select class="form-control" name="Status">
                            <option @Html.Raw(isActive ? "selected" : "")>Active</option>
                            <option @Html.Raw(isActive ? "" : "selected")>Inactive</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label">Level</label>
                    <div class="col-sm-1">
                        <select class="form-control" name="PostLevel">
                            @if (!string.IsNullOrEmpty(Model.PostLevel) && Model.PostLevel == "Hot")
                            {
                                @Html.Raw("<option>Normal</option>")
                                @Html.Raw("<option selected>Hot</option>")
                            }
                            else
                            {
                                @Html.Raw("<option selected>Normal</option>")
                                @Html.Raw("<option>Hot</option>")
                            }
                        </select>
                    </div>
                </div>
                <div class="bg-default content-box text-center pad20A mrg25T">
                    <button type="submit" class="btn btn-lg btn-info">Submit</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script type="text/javascript">
    $(function () {
        "use strict";
        $(".input-mask").inputmask();
    });

    $('#imgData').on('change', function () {
        var input = this;
        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                $('#imgThumbnail').attr('src', e.target.result);
            }

            reader.readAsDataURL(input.files[0]);
        }
    });
</script>