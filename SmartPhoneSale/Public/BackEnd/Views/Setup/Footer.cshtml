@using BackEnd.Models
@model SiteConfig

@{
    ViewBag.Title = "Site Setup";
}

<style>
    .google-map {
        display: block;
        position: relative;
        width: 100%;
        height: 360px;
        margin-top: 15px;
    }
</style>

<div class="row">
    <div class="card card-outlined">
        <div class="card-head">
            <header>
                Setup Footer
            </header>
        </div>
        <div class="card-body">
            @using (Html.BeginForm("Footer", "Setup", FormMethod.Post, new { @class = "form form-validate" }))
            {
                @Html.HiddenFor(m => m.Logo)
                @Html.HiddenFor(m => m.HeaderText)
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            <textarea id="content_ckeditor" name="Information" class="form-control control-5-rows">@Html.Raw(Model.Information)</textarea>
                            <label>Information</label>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div id="map_canvas" class="google-map"></div>
                        <div class="form-group">
                            <textarea id="map_address" name="GoogleMapsLocation" class="form-control control-2-rows">@Model.GoogleMapsLocation</textarea>
                            <label>Địa chỉ Google Maps</label>
                        </div>
                    </div>
                    <input type="hidden" id="hidden_latitude" name="Latitude" value="@Model.Latitude" />
                    <input type="hidden" id="hidden_longitude" name="Longitude" value="@Model.longitude" />
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        <div class="form-group">
                            <input type="submit" class="btn btn-primary" value="Save" />
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section scripts{
    <script src="~/Scripts/ckeditor/ckeditor.js"></script>
    <script src="~/Scripts/ckeditor/adapters/jquery.js"></script>
    <script>
        $(function () {
            $('#content_ckeditor').ckeditor();
        });
    </script>

    <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>

    <script type="text/javascript">
        var map = null;
        var marker = null;
        var waitTimer;

        $(document).ready(function () {
            initialize();
        });
        function initialize() {
            var pos = new google.maps.LatLng(10.768135, 106.699701);
            if (@Model.Latitude != 0 && @Model.longitude != 0) {
                pos = new google.maps.LatLng(@Model.Latitude, @Model.longitude)
            }

            var title = 'Ho Chi Minh City';
            if ('@string.IsNullOrEmpty(Model.GoogleMapsLocation).ToString().ToLower()' === 'false'){
                title = '@Model.GoogleMapsLocation.ToString()';
            }

            var mapOptions = {
                center: pos,
                zoom: 12,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            map = new google.maps.Map(document.getElementById("map_canvas"),
              mapOptions);

            marker = new google.maps.Marker({
                position: pos,
                map: map,
                title: title
            });
        }

        $('#map_address').on('blur', function() {
            console.log('address changed');
            if (!$(this).val()) {
                return false;
            }

            getLocationFromAddress($(this).val());
        });

        function getLocationFromAddress(addr) {
            console.log('address: ' + addr);

            $.ajax({
                url: 'http://maps.google.com/maps/api/geocode/json?address=' + addr,
                type: 'GET',
                dataType: 'json',
                success: function (result) {
                    if (!result) {
                        console.log('null result');
                    }

                    if (result.status !== 'OK')
                    {
                        console.log('address dose not exist');
                        alert('address dose not exist');
                        return false;
                    }

                    if (!result.results || !result.results[0].geometry || !result.results[0].geometry.location) {
                        console.log('null location');
                        return false;
                    }

                    var loc = result.results[0].geometry.location;
                    $('#hidden_latitude').val(loc.lat);
                    $('#hidden_longitude').val(loc.lng);

                    waitForMapInitSuccess(loc);
                },
                error: function (xhr, status, error) {
                    console.log(error);
                    alert(error);
                }
            });
        }

        function waitForMapInitSuccess(loc, addr) {
            console.log(loc);
            //---
            if (map) {
                if (waitTimer) {
                    clearTimeout(waitTimer);
                    waitTimer = null;
                }

                setCenterMapWithAddress(loc, addr);
                return false;
            }

            waitTimer = setTimeout(waitForMapInitSuccess(loc, addr), 500);
        }

        function setCenterMapWithAddress(loc, addr) {
            if (marker) {
                marker.setMap(null); 
                marker = null;
            }

            marker = new google.maps.Marker({
                position: loc,
                map: map,
                title: addr
            });

            map.setCenter(loc);
        }
    </script>
}